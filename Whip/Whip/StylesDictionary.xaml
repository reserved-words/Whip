<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Whip"
                    xmlns:properties="clr-namespace:Whip.Properties"
                    xmlns:conv="clr-namespace:Whip.Converters"
                    xmlns:ioc="clr-namespace:Whip.Ioc"
                    xmlns:controls="clr-namespace:Whip.Controls"
                    xmlns:tabsvm="clr-namespace:Whip.ViewModels.TabViewModels;assembly=Whip.ViewModels"
                    xmlns:viewModel="clr-namespace:Whip.ViewModels;assembly=Whip.ViewModels">
    
    <!-- VIEW MODEL LOCATOR -->
    <ioc:ViewModelLocator x:Key="ViewModelLocator" />
    
    <!-- CONVERTERS -->
    <conv:BoolToVisibilityConverter x:Key="BoolVisibilityConverter" />
    <conv:BoolToVisibilityConverter x:Key="NegBoolVisibilityConverter" Negate="True" />
    <conv:StringToVisibilityConverter x:Key="StringVisibilityConverter" />
    <conv:EnumToStringConverter x:Key="EnumToStringConverter" />
    <conv:EqualityConverter x:Key="EqualityConverter" />
    <conv:BytesToImageConverter x:Key="BytesToImageConverter" />
    <conv:NegateBoolConverter x:Key="NegateBoolConverter" />

    <!-- DATA TEMPLATES -->
    <DataTemplate DataType="{x:Type tabsvm:LibraryViewModel}">
        <local:TabLibrary />
    </DataTemplate>
    <DataTemplate DataType="{x:Type tabsvm:EditSettingsViewModel}">
        <local:TabSettings />
    </DataTemplate>
    <DataTemplate DataType="{x:Type tabsvm:ArchiveViewModel}">
        <local:TabGenericTemp />
    </DataTemplate>
    <DataTemplate DataType="{x:Type tabsvm:CurrentTrackViewModel}">
        <local:TabCurrentTrack />
    </DataTemplate>
    <DataTemplate DataType="{x:Type tabsvm:CurrentArtistViewModel}">
        <local:TabGenericTemp />
    </DataTemplate>
    <DataTemplate DataType="{x:Type tabsvm:CurrentPlaylistViewModel}">
        <local:TabCurrentPlaylist />
    </DataTemplate>
    <DataTemplate DataType="{x:Type tabsvm:PlaylistsViewModel}">
        <local:TabGenericTemp />
    </DataTemplate>
    <DataTemplate DataType="{x:Type tabsvm:SearchViewModel}">
        <local:TabGenericTemp />
    </DataTemplate>
    <DataTemplate DataType="{x:Type tabsvm:NewsViewModel}">
        <local:TabGenericTemp />
    </DataTemplate>
    <DataTemplate DataType="{x:Type tabsvm:LastFmViewModel}">
        <local:TabGenericTemp />
    </DataTemplate>
    <DataTemplate DataType="{x:Type tabsvm:DashboardViewModel}">
        <local:TabGenericTemp />
    </DataTemplate>
    <DataTemplate DataType="{x:Type tabsvm:EditTrackViewModel}">
        <local:TabEditTrack />
    </DataTemplate>

    <!-- STYLES -->
    <Style TargetType="{x:Type CheckBox}">
        <Setter Property="VerticalContentAlignment" Value="Center" />
    </Style>
    
    <Style TargetType="{x:Type controls:Icon32}">
        <Setter Property="Foreground" Value="{Binding Source={x:Static properties:Settings.Default}, Path=MainColourRgb}" />
    </Style>

    <Style TargetType="{x:Type controls:Icon16}">
        <Setter Property="Foreground" Value="{Binding Source={x:Static properties:Settings.Default}, Path=MainColourRgb}" />
        <Setter Property="Margin" Value="2" />
    </Style>

    <Style TargetType="{x:Type ComboBox}">
        <Setter Property="Height" Value="22" />
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <WrapPanel>
                        <controls:Icon16 Icon="ExclamationTriangle"
                                         VerticalAlignment="Center"
                                         HorizontalAlignment="Center"
                                         ToolTip="{Binding AdornedElement.ToolTip, ElementName=errorControl}"
                                         Visibility="{Binding ElementName=errorControl, Path=(Validation.Errors)[0].ErrorContent, Converter={StaticResource ResourceKey=StringVisibilityConverter}}"/>
                        <Border>
                            <AdornedElementPlaceholder x:Name="errorControl" />
                        </Border>
                    </WrapPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="Background" Value="Cornsilk" />
                <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)[0].ErrorContent}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type TextBox}">
        <Setter Property="Height" Value="20" />
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <WrapPanel>
                        <controls:Icon16 Icon="ExclamationTriangle"
                                         VerticalAlignment="Center"
                                         HorizontalAlignment="Center"
                                         ToolTip="{Binding AdornedElement.ToolTip, ElementName=errorControl}"
                                         Visibility="{Binding ElementName=errorControl, Path=(Validation.Errors)[0].ErrorContent, Converter={StaticResource ResourceKey=StringVisibilityConverter}}"/>
                        <Border>
                            <AdornedElementPlaceholder x:Name="errorControl" />
                        </Border>
                    </WrapPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="Background" Value="Cornsilk" />
                <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)[0].ErrorContent}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type controls:HyperlinkLabel}">
        <Setter Property="Margin" Value="0" />
        <Setter Property="Padding" Value="0" />
    </Style>

    <Style TargetType="{x:Type TextBlock}">
        <Setter Property="TextWrapping" Value="WrapWithOverflow" />
    </Style>

    <Style TargetType="{x:Type Label}" x:Key="LabelStyle">
        <Setter Property="VerticalContentAlignment" Value="Center" />
    </Style>

    <Style TargetType="{x:Type Label}"  BasedOn="{StaticResource LabelStyle}">
        <Setter Property="VerticalContentAlignment" Value="Center" />
    </Style>

    <Style TargetType="{x:Type Label}" x:Key="TitleLabel" BasedOn="{StaticResource LabelStyle}">
        <Setter Property="FontWeight" Value="Bold" />
    </Style>

    <Style TargetType="{x:Type TextBlock}" x:Key="HyperlinkText">
        <Setter Property="Foreground" Value="{Binding Source={x:Static properties:Settings.Default}, Path=MainColourRgb}" />
        <Setter Property="TextDecorations" Value="Underline" />
    </Style>

    <Style TargetType="{x:Type Image}" x:Key="Icon32">
        <Setter Property="Height" Value="32" />
        <Setter Property="Width" Value="32" />
        <Setter Property="Margin" Value="0,5,5,5" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
    </Style>

    <Style TargetType="{x:Type Image}" x:Key="Icon16">
        <Setter Property="Height" Value="16" />
        <Setter Property="Width" Value="16" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
    </Style>

    <Style TargetType="{x:Type ProgressBar}" x:Key="ProgressBarStyle">
        <Setter Property="Padding" Value="5" />
        <Setter Property="Maximum" Value="100" />
        <Setter Property="Foreground" Value="{Binding Source={x:Static properties:Settings.Default}, Path=MainColourRgb}" />
        <Setter Property="Height" Value="10" />
    </Style>

    <Style TargetType="{x:Type ProgressBar}"
           BasedOn="{StaticResource ProgressBarStyle}" />

    <Style TargetType="{x:Type controls:ClickableProgressBar}"
           BasedOn="{StaticResource ProgressBarStyle}" />

    <Style TargetType="{x:Type Button}" x:Key="ButtonStyle">
        <Setter Property="Padding" Value="5 2" />
        <Setter Property="MinWidth" Value="60" />
        <Setter Property="MinHeight" Value="25" />
        <Setter Property="Margin" Value="0,5,5,5" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border CornerRadius="4" 
                            Background="{TemplateBinding Background}">
                        <Grid>
                            <ContentPresenter Content="{TemplateBinding Content}" 
                                              HorizontalAlignment="Center" 
                                              VerticalAlignment="Center" 
                                              Margin="0" />
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{Binding Source={x:Static properties:Settings.Default}, Path=MainColourRgb}" />
                            <Setter Property="Foreground" Value="White" />
                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{Binding Source={x:Static properties:Settings.Default}, Path=MainColourRgb}" />
                            <Setter Property="Foreground" Value="White" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="LightGray" />
                            <Setter Property="Foreground" Value="White" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Button}"
           BasedOn="{StaticResource ButtonStyle}">
    </Style>

    <Style TargetType="{x:Type controls:PlayerControlButton}"
           BasedOn="{StaticResource ButtonStyle}">
    </Style>

    <Style TargetType="DataGrid">
        <Setter Property="AutoGenerateColumns" Value="False" />
        <Setter Property="CanUserAddRows" Value="False" />
        <Setter Property="CanUserDeleteRows" Value="False" />
        <Setter Property="IsReadOnly" Value="True" />
        <Setter Property="GridLinesVisibility" Value="None" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="SelectionUnit" Value="FullRow" />
        <Setter Property="HorizontalGridLinesBrush" Value="Silver" />
        <Setter Property="VerticalGridLinesBrush" Value="Silver" />
    </Style>

    <Style TargetType="{x:Type DataGridRow}">
        <Setter Property="Height" Value="20" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
    </Style>

    <Style TargetType="DataGridCell">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="5 0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Border x:Name="Bd" 
                            Padding="{TemplateBinding Padding}" 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            Background="{TemplateBinding Background}" 
                            SnapsToDevicePixels="True">
                        <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{Binding Source={x:Static properties:Settings.Default}, Path=MainColourRgb}"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
            </Trigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="True"/>
                    <Condition Binding="{Binding IsKeyboardFocusWithin, RelativeSource={RelativeSource AncestorType=DataGrid}}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="True"/>
                    <Condition Binding="{Binding ContextMenu.IsOpen, RelativeSource={RelativeSource AncestorType=DataGrid}}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="{Binding Source={x:Static properties:Settings.Default}, Path=MainColourRgb}"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ColourBorder" TargetType="Border">
        <Setter Property="BorderBrush" Value="{Binding Source={x:Static properties:Settings.Default}, Path=MainColourRgb}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Margin" Value="5" />
        <Setter Property="Padding" Value="5" />
        <Setter Property="CornerRadius" Value="4" />
    </Style>
    <Style x:Key="VerticalLine" TargetType="Border">
        <Setter Property="BorderBrush" Value="Silver" />
        <Setter Property="BorderThickness" Value="0 0 1 0" />
        <Setter Property="Margin" Value="10 0" />
    </Style>
    <Style x:Key="HoriztonalLine" TargetType="Border">
        <Setter Property="BorderBrush" Value="Silver" />
        <Setter Property="BorderThickness" Value="0 0 0 1" />
        <Setter Property="Margin" Value="0 10" />
    </Style>

    <Style TargetType="{x:Type ListViewItem}">
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    </Style>

    <Style TargetType="{x:Type ListView}">
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Hidden" />
    </Style>
    
    <!-- LIST VIEWS WITHOUT BLUE HIGHLIGHTING -->
    <Style TargetType="{x:Type ListViewItem}" x:Key="ListViewItemNoHighlight">
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <Border x:Name="Bd" 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            Background="{TemplateBinding Background}" 
                            Padding="{TemplateBinding Padding}" 
                            SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="Transparent"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="Transparent"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="False"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="Transparent"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="Transparent"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="True"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="Transparent"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="Transparent"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" TargetName="Bd" Value="Transparent"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>

</ResourceDictionary>